#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('lulilucullu:server');
var http = require('http');
var DbController = require('./../controllers/DatabaseController');
var SocketController = require('./../controllers/SocketController');
// var conf = require('../conf.json');
var compressor = require('node-minify');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Promt environment db logins
 */
var _dbController = new DbController();
var connection = _dbController.connect(startServer);

/**
 * Minify js and css files
 */
new compressor.minify({
    type: 'gcc',
    fileIn: [
        'public/thirdparty/dev-js/jquery-2.1.4.js',
        'public/thirdparty/dev-js/bootstrap.js',
        'public/thirdparty/dev-js/cookieconsent.js',
        'public/thirdparty/dev-js/jquery.sweet-dropdown.js',
        //'public/thirdparty/dev-js/socket.io.min.js'
    ],
    fileOut: 'public/dist/main.js',
    callback: function(err) {
        console.log(err);
    }
});

new compressor.minify({
    type: 'yui-css',
    fileIn: [
        'public/thirdparty/css/bootstrap.css',
        'public/thirdparty/css/font-awesome.min.css',
        'public/thirdparty/css/jquery.sweet-dropdown.css',
        'public/css/app.css'
    ],
    fileOut: 'public/dist/main.css',
    callback: function(err) {
        console.log(err);
    }
});

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Create Socket Controller
 */
var _socketController = new SocketController();

function startServer() {
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    _socketController.startServerSocket(io, server);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
